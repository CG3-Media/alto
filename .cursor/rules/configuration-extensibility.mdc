---
description:
globs:
alwaysApply: true
---
# Configuration & Extensibility System

## **Configuration Architecture**

- **Centralized Configuration**: Use `Alto.configuration` object for all settings
- **Initializer Support**: Generate configuration initializer for host app customization
- **Sensible Defaults**: Provide working defaults for all configuration options
- **Runtime Configuration**: Support runtime configuration changes where appropriate
- **Environment-Specific**: Allow different settings per Rails environment

```ruby
# ✅ DO: Proper configuration structure
module Alto
  class Configuration
    attr_accessor :user_class, :user_display_method, :from_email,
                  :admin_email, :enable_notifications, :items_per_page

    def initialize
      @user_class = 'User'
      @user_display_method = :email
      @from_email = 'noreply@example.com'
      @admin_email = nil
      @enable_notifications = true
      @items_per_page = 25
    end

    def user_model
      @user_class.constantize
    rescue NameError
      raise "User class #{@user_class} not found. Please configure Alto.configuration.user_class"
    end
  end

  def self.configuration
    @configuration ||= Configuration.new
  end

  def self.configure
    yield(configuration)
  end
end
```

## **Permission System Integration**

- **Flexible Permission Hooks**: Support multiple permission gem patterns (CanCan, Pundit, custom)
- **Method-Based Permissions**: Use predictable method names for permission checks
- **Graceful Degradation**: Provide reasonable defaults when permissions aren't configured
- **Board-Level Permissions**: Support board-specific access control
- **Action-Specific Permissions**: Granular permissions for different actions

```ruby
# ✅ DO: Flexible permission integration
module Alto::PermissionHelpers
  def can_access_feedback_board?(user = current_user)
    return false unless user

    if user.respond_to?(:can?)
      user.can?(:access_feedback_board)
    elsif respond_to?(:authorize)
      # Pundit-style authorization
      begin
        authorize :feedback_board, :access?
        true
      rescue Pundit::NotAuthorizedError
        false
      end
    else
      # Default: all authenticated users can access
      true
    end
  end

  def can_create_ticket?(board, user = current_user)
    return false unless can_access_feedback_board?(user)
    # Board-specific permission logic here
    user.respond_to?(:can?) ? user.can?(:create_ticket, board) : true
  end
end
```

## **UI Component System**

- **Unified Button Components**: Consistent button styling with `button_type` API
- **Page Header System**: Standardized page headers with action buttons
- **Helper Methods**: Convenient view helpers for common UI patterns
- **Theme Customization**: Support for custom CSS and styling overrides
- **Responsive Design**: Mobile-first responsive component patterns

```ruby
# ✅ DO: Reusable component helpers
module Alto::ApplicationHelper
  def render_button(text, options = {})
    render 'shared/button', {
      text: text,
      button_type: :primary,
      size: 'medium'
    }.merge(options)
  end

  def page_header(title, actions: [], subtitle: nil)
    render 'alto/shared/page_header',
           title: title,
           actions: actions,
           subtitle: subtitle
  end

  def status_badge(status)
    render 'shared/status_badge', status: status
  end
end
```

## **Email Configuration**

- **ActionMailer Integration**: Use host app's ActionMailer configuration
- **Template Customization**: Allow override of email templates in host app
- **Notification Settings**: Configurable notification preferences per user/board
- **Background Processing**: Support for background job processing (Sidekiq, etc.)
- **Email Testing**: Easy testing and preview of notification emails

```ruby
# ✅ DO: Flexible email configuration
class Alto::NotificationMailer < ApplicationMailer
  default from: -> { Alto.configuration.from_email }

  def ticket_created(ticket, user)
    @ticket = ticket
    @user = user
    @board = ticket.board

    mail(
      to: notification_recipients(ticket),
      subject: "[#{@board.name}] New ticket: #{@ticket.title}"
    )
  end

  private

  def notification_recipients(ticket)
    recipients = []

    # Board-specific notification settings
    if ticket.board.notify_admins?
      recipients << Alto.configuration.admin_email
    end

    # User-specific notification preferences
    if ticket.user&.wants_feedback_notifications?
      recipients << ticket.user.email
    end

    recipients.compact.uniq
  end
end
```

## **Asset Management**

- **No-Build Strategy**: Use CDN-delivered assets (Rails UJS, Tailwind CSS)
- **Stimulus Integration**: Optional Stimulus controller generation
- **Custom Styling**: Support for custom CSS overrides
- **JavaScript Extensibility**: Hooks for custom JavaScript integration
- **Asset Pipeline Compatibility**: Work with or without asset pipeline

## **Generator System**

- **Install Generator**: Copy essential files to host app
- **Configuration Generator**: Create initializer with settings
- **Migration Generator**: Create properly timestamped migrations
- **Override Generator**: Help with view/controller customization

```ruby
# ✅ DO: Comprehensive install generator
class Alto::InstallGenerator < Rails::Generators::Base
  source_root File.expand_path('templates', __dir__)

  def copy_initializer
    copy_file 'feedback_board.rb', 'config/initializers/feedback_board.rb'
  end

  def copy_stimulus_controller
    copy_file 'feedback_board_controller.js',
              'app/javascript/controllers/feedback_board_controller.js'
  end

  def create_migrations
    rake 'feedback_board:install:migrations'
  end

  def show_readme
    readme 'README'
  end
end
```

## **Testing Support**

- **Test Helpers**: Provide helper methods for testing integrations
- **Factory Support**: Example factories for FactoryBot
- **Mock Helpers**: Helpers for mocking permission and callback methods
- **Integration Test Examples**: Sample integration tests for common scenarios

## **Documentation & Examples**

- **Integration Examples**: Multiple integration patterns (simple, complex, enterprise)
- **Permission Examples**: Examples for different permission gems
- **Callback Examples**: Real-world callback integration patterns
- **Troubleshooting Guide**: Common issues and solutions
- **Upgrade Guide**: Migration instructions between versions

## **Performance Configuration**

- **Pagination Settings**: Configurable items per page
- **Caching Strategy**: Configurable caching options
- **Background Job Integration**: Support for various job processors
- **Search Configuration**: Configurable search behavior and limits
- **Asset Loading**: Configurable CDN and asset loading strategies

## **Multi-Tenancy Support**

- **Database Scoping**: Support for tenant-scoped data
- **Configuration Per Tenant**: Tenant-specific configuration options
- **Permission Scoping**: Tenant-aware permission checking
- **Email Configuration**: Tenant-specific email settings
- **Asset Customization**: Tenant-specific styling and branding

Reference: @directive.md Configuration sections and @schema.prisma for complete customization examples
