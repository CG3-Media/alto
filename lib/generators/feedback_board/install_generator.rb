module FeedbackBoard
  module Generators
      class InstallGenerator < Rails::Generators::Base
    source_root File.expand_path("templates", __dir__)

    desc "Install FeedbackBoard engine"

    def create_initializer
      create_file "config/initializers/feedback_board.rb", <<~RUBY
        # FeedbackBoard Configuration
        # Generated by rails generate feedback_board:install

        FeedbackBoard.configure do |config|
          # User display name configuration
          # Customize how user names are displayed in comments
          # config.user_display_name_method = proc do |user_id|
          #   user = User.find_by(id: user_id)
          #   return "Anonymous" unless user
          #   user.full_name.presence || user.email || "User #\#{user_id}"
          # end

          # Email notification settings
          # config.notifications_enabled = true
          # config.notification_from_email = "feedback@yourdomain.com"
          # config.admin_notification_emails = ["admin@yourdomain.com"]

          # Board configuration
          # config.default_board_name = "Feedback"
          # config.default_board_slug = "feedback"

          # ==============================================================================
          # PERMISSION METHODS
          # ==============================================================================
          # Only define the permissions you want to customize.
          # The engine provides smart defaults for any permissions you don't define.
          #
          # All blocks execute in the controller context during requests,
          # so you have access to current_user, session, request, etc.

          # Control who can access the feedback board
          # Default: true (if current_user exists)
          # config.permission :can_access_feedback_board? do
          #   user_signed_in?
          # end

          # Control who can submit new tickets
          # Default: true (if current_user exists)
          # config.permission :can_submit_tickets? do
          #   user_signed_in?
          # end

          # Control who can comment on tickets
          # Default: true (if current_user exists)
          # config.permission :can_comment? do
          #   user_signed_in?
          # end

          # Control who can vote on tickets/comments
          # Default: true (if current_user exists)
          # config.permission :can_vote? do
          #   user_signed_in?
          # end

          # Control who can edit tickets (status, lock, etc.)
          # Default: false (secure by default)
          # config.permission :can_edit_tickets? do
          #   current_user&.admin?
          # end

          # Control who can access the admin area
          # Default: false (secure by default)
          # config.permission :can_access_admin? do
          #   current_user&.admin?
          # end

          # Control who can manage boards (create, edit, delete)
          # Default: false (secure by default)
          # config.permission :can_manage_boards? do
          #   current_user&.admin?
          # end

          # Control access to specific boards
          # Default: true (all boards accessible if user is logged in)
          # config.permission :can_access_board? do |board|
          #   # Example: Restrict private boards to admins
          #   return false if board.slug == 'private' && !current_user&.admin?
          #   true
          # end

          # ==============================================================================
          # EXAMPLE ADVANCED CONFIGURATIONS
          # ==============================================================================

          # Example: Role-based permissions
          # config.permission :can_edit_tickets? do
          #   current_user&.has_role?(:admin, :moderator)
          # end

          # Example: Board-specific admin permissions
          # config.permission :can_manage_boards? do
          #   current_user&.board_admin?
          # end

          # Example: Custom permission service
          # config.permission :can_access_feedback_board? do
          #   PermissionService.new(current_user).can_access_feedback?
          # end

          # Example: Time-based restrictions
          # config.permission :can_submit_tickets? do
          #   user_signed_in? && !current_user.rate_limited?
          # end
        end
      RUBY
    end

    def show_setup_instructions
        say "\n" + "="*60, :green
        say "ðŸŽ‰ FeedbackBoard Installation Complete!", :green
        say "="*60, :green

        say "\nNext steps:", :yellow
        say "1. Add to your routes.rb:", :cyan
        say "   mount FeedbackBoard::Engine => '/feedback'"

        say "\n2. Run migrations:", :cyan
        say "   rails feedback_board:install:migrations"
        say "   rails db:migrate"

                say "\n3. Make sure your layout includes:", :cyan
        say "   <%= csrf_meta_tags %>"

        say "\n4. (Optional) Customize permissions in config/initializers/feedback_board.rb", :cyan
        say "   The initializer contains all available permission options with examples."

        say "\nâœ¨ That's it! No JavaScript setup required.", :green
        say "   AJAX voting and all interactive features work automatically!"

        say "\nðŸ“š Check the initializer and README for more customization options!", :blue

        say "\nðŸš€ Visit /feedback after mounting to see your feedback board in action!", :magenta
      end
    end
  end
end
