<div data-nested-model="status_set" id="status-set-form">
  <%= form_with(model: [:admin, @status_set], local: true, class: "space-y-6") do |form| %>
    <% if @status_set.errors.any? %>
      <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
        <h4 class="font-medium">Please fix the following errors:</h4>
        <ul class="mt-2 list-disc list-inside">
          <% @status_set.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <!-- Status Set Details -->
    <div class="bg-white shadow rounded-lg p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">📋 Status Set Details</h3>

      <%= render 'shared/forms/input',
          form: form,
          field_name: :name,
          placeholder: "Status set name (e.g., 'Development Workflow')",
          model: @status_set,
          required: true %>

      <%= render 'shared/forms/text_area',
          form: form,
          field_name: :description,
          placeholder: "Describe when to use this status set",
          rows: 3,
          model: @status_set,
          helper_text: "Help users understand when to use this workflow" %>

      <div>
        <label class="flex items-center">
          <%= form.check_box :is_default, class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" %>
          <span class="ml-2 text-sm text-gray-900">Set as default status set</span>
        </label>
        <p class="mt-1 text-sm text-gray-500">The default status set is used for new boards unless specified otherwise</p>
      </div>
    </div>

    <!-- Statuses -->
    <div class="bg-white shadow rounded-lg p-6">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900">🏷️ Statuses</h3>
        <button type="button" data-add-nested="statuses" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm font-medium">
          + Add Status
        </button>
      </div>

      <div data-nested-attributes="statuses" class="space-y-4">
        <%= form.fields_for :statuses do |status_form| %>
          <%= render 'status_field', form: status_form %>
        <% end %>
      </div>

      <p class="mt-2 text-sm text-gray-500">
        💡 Tip: Create statuses in the order you want them to appear. Common workflows: Open → In Progress → Complete
      </p>
    </div>

    <div class="flex justify-end space-x-3">
      <%= render 'shared/buttons/secondary',
          text: "Cancel",
          url: alto.admin_status_sets_path %>
      <%= render 'shared/buttons/primary',
          text: (@status_set.new_record? ? "Create Status Set" : "Update Status Set"),
          type: "submit" %>
    </div>
  <% end %>

  <!-- Template for new status fields -->
  <template id="statuses-template">
  <div data-nested-field data-nested-index class="status-field border border-gray-200 rounded-lg p-4 bg-gray-50">
    <input type="hidden" data-nested-field="_destroy" value="false">
    <input type="hidden" data-nested-field="position">

    <div class="flex justify-between items-start mb-3">
      <h4 data-nested-title="Status {index}" class="text-sm font-medium text-gray-700">New Status</h4>
      <button type="button" data-remove-nested class="text-red-600 hover:text-red-800 text-sm">
        ✕ Remove
      </button>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- Status Name -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">
          Status Name <span class="text-red-500">*</span>
        </label>
        <input type="text" data-nested-field="name" placeholder="e.g., Open, In Progress, Complete"
               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" required>
      </div>

      <!-- Status Slug -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">
          Slug
        </label>
        <input type="text" data-nested-field="slug" placeholder="e.g., open, in_progress, complete"
               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm bg-gray-50" readonly>
                  <p class="mt-1 text-xs text-gray-500">URL-friendly identifier (auto-generated from name)</p>
      </div>

      <!-- Color -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">
          Color <span class="text-red-500">*</span>
        </label>
        <select data-nested-field="color" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="">Select a color</option>
          <option value="green">🟢 Green</option>
          <option value="blue">🔵 Blue</option>
          <option value="yellow">🟡 Yellow</option>
          <option value="red">🔴 Red</option>
          <option value="gray">⚪ Gray</option>
          <option value="purple">🟣 Purple</option>
          <option value="orange">🟠 Orange</option>
          <option value="pink">🩷 Pink</option>
        </select>
      </div>


    </div>

    <!-- Color Preview -->
    <div class="mt-3">
      <div class="flex items-center space-x-2">
        <span class="text-sm text-gray-600">Preview:</span>
        <span data-color-preview class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          Status Name
        </span>
      </div>
    </div>
  </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize with custom color preview handlers
  RRF.init('#status-set-form', {
    onFieldChange: ({ fieldName, field, fieldContainer, meta }) => {
      // Handle name changes for slug generation and preview
      if (fieldName === 'name') {
        generateSlug(fieldContainer)
        updateColorPreview(fieldContainer)
      }
      // Handle color changes for preview
      else if (fieldName === 'color') {
        updateColorPreview(fieldContainer)
      }
    },

    onFieldAdd: ({ fieldContainer, meta }) => {
      // Setup initial preview, slug, and position for new fields
      updatePosition(fieldContainer, meta)
      generateSlug(fieldContainer)
      updateColorPreview(fieldContainer)
    },

    onFieldRemove: ({ fieldContainer, isDestroy, meta }) => {
      // Recalculate positions for remaining fields when a field is removed
      if (!isDestroy) { // Only for fields actually removed from DOM
        setTimeout(() => {
          recalculatePositions(meta.container)
        }, 100) // Small delay to let DOM update
      }
    }
  })

                        // Position management function
  function updatePosition(fieldContainer, meta) {
    // Calculate the correct visual position based on visible STATUS CONTAINERS
    const statusContainer = meta.container.querySelector('[data-nested-attributes="statuses"]')
    const statusFields = Array.from(statusContainer.children).filter(child =>
      child.classList.contains('status-field') &&
      child.style.display !== 'none'
    )

        const thisFieldIndex = statusFields.indexOf(fieldContainer)
    const correctPosition = thisFieldIndex

    // Target the hidden position field
    let positionField = fieldContainer.querySelector('input[data-nested-field="position"]')

    // Fallback for server-rendered fields
    if (!positionField) {
      positionField = fieldContainer.querySelector('input[name*="[position]"]')
    }

    const titleElement = fieldContainer.querySelector('[data-nested-title]')

    if (positionField) {
      positionField.value = correctPosition.toString()
    }

    // Update dynamic title if present (e.g., "Status 1", "Status 2")
    if (titleElement) {
      const titleTemplate = titleElement.dataset.nestedTitle || 'Status {index}'
      titleElement.textContent = titleTemplate.replace('{index}', (correctPosition + 1).toString())
    }
  }

      // Recalculate positions for all remaining fields
  function recalculatePositions(container) {
    const statusContainer = container.querySelector('[data-nested-attributes="statuses"]')
    if (!statusContainer) return

    // Count status field containers, not individual nested fields
    const statusFields = Array.from(statusContainer.children).filter(child =>
      child.classList.contains('status-field') &&
      child.style.display !== 'none'
    )

    statusFields.forEach((fieldContainer, index) => {
      // Target the hidden position field first, then fallback
      let positionField = fieldContainer.querySelector('input[data-nested-field="position"]')
      if (!positionField) {
        positionField = fieldContainer.querySelector('input[name*="[position]"]')
      }

      const titleElement = fieldContainer.querySelector('[data-nested-title]')

      if (positionField) {
        positionField.value = index.toString()
      }

      if (titleElement) {
        const titleTemplate = titleElement.dataset.nestedTitle || 'Status {index}'
        titleElement.textContent = titleTemplate.replace('{index}', (index + 1).toString())
      }
    })
  }

  // Slug generation function
  function generateSlug(fieldContainer) {
    const nameField = fieldContainer.querySelector('input[name*="[name]"]')
    const slugField = fieldContainer.querySelector('input[name*="[slug]"]')

    if (nameField && slugField) {
      const name = nameField.value || ''
      const slug = name
        .toLowerCase()                    // Convert to lowercase
        .trim()                          // Remove leading/trailing whitespace
        .replace(/[^\w\s-]/g, '')        // Remove special characters except hyphens and spaces
        .replace(/[\s_-]+/g, '-')        // Replace spaces and underscores with hyphens
        .replace(/^-+|-+$/g, '')         // Remove leading/trailing hyphens

      slugField.value = slug
    }
  }

  // Color preview update function
  function updateColorPreview(fieldContainer) {
    const colorField = fieldContainer.querySelector('select[name*="[color]"], input[name*="[color]"]')
    const nameField = fieldContainer.querySelector('input[name*="[name]"]')
    const previewElement = fieldContainer.querySelector('[data-color-preview]')

    if (colorField && previewElement) {
      const color = colorField.value
      const name = nameField ? nameField.value || 'Status Name' : 'Status Name'

      // Color class mapping
      const colorClasses = {
        'green': 'bg-green-100 text-green-800',
        'blue': 'bg-blue-100 text-blue-800',
        'yellow': 'bg-yellow-100 text-yellow-800',
        'red': 'bg-red-100 text-red-800',
        'gray': 'bg-gray-100 text-gray-800',
        'purple': 'bg-purple-100 text-purple-800',
        'orange': 'bg-orange-100 text-orange-800',
        'pink': 'bg-pink-100 text-pink-800'
      }

      previewElement.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClasses[color] || 'bg-gray-100 text-gray-800'}`
      previewElement.textContent = name
    }
  }
})
</script>
