<div class="space-y-6">
  <%= render 'shared/page_header',
      title: "⚙️ App Settings",
      actions: [
        {
          type: :link,
          text: "Dashboard",
          path: feedback_board.admin_root_path,
          button_type: :secondary
        },
        {
          type: :link,
          text: "Back to Tickets",
          path: feedback_board.root_path,
          button_type: :secondary
        }
      ] %>

  <div class="bg-white rounded-lg shadow">
    <div class="px-6 py-4 border-b border-gray-200">
      <h3 class="text-lg font-medium text-gray-900">Application Settings</h3>
      <p class="text-sm text-gray-500 mt-1">Configure app branding and general settings</p>
    </div>

    <%= form_with url: feedback_board.admin_settings_path, method: :patch, local: true, class: "p-6 space-y-6" do |form| %>

      <!-- App Branding -->
      <div class="space-y-4">
        <h4 class="text-md font-medium text-gray-900">App Branding</h4>

        <div>
          <label for="app_name" class="block text-sm font-medium text-gray-700">Application Name</label>
          <%= text_field_tag "app_name", @config.app_name,
              id: "app_name",
              placeholder: "Feedback Board",
              class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" %>
          <p class="mt-1 text-sm text-gray-500">The name that appears in the header and page title</p>
        </div>
      </div>

      <!-- Persistence Info -->
      <div class="bg-green-50 border-l-4 border-green-400 p-4">
        <div class="flex">
          <div class="ml-3">
            <p class="text-sm text-green-700">
              <strong>✅ Persistent Settings:</strong> These settings are saved to the database and will persist across application restarts.
              You can also override them via Rails initializer if needed.
            </p>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-end border-t pt-6">
        <%= render 'shared/button',
            text: "Save Settings",
            type: "submit",
            button_type: :primary %>
      </div>
    <% end %>
  </div>

  <!-- Notifications Info -->
  <div class="bg-white rounded-lg shadow">
    <div class="px-6 py-4 border-b border-gray-200">
      <h3 class="text-lg font-medium text-gray-900">📧 Email Notifications</h3>
      <p class="text-sm text-gray-500 mt-1">Configure notifications in your host application using callbacks</p>
    </div>
    <div class="p-6">
      <div class="bg-blue-50 border-l-4 border-blue-400 p-4">
        <div class="flex">
          <div class="ml-3">
            <p class="text-sm text-blue-700">
              <strong>🔄 Callback Integration:</strong> Email notifications are now handled through your host application using the callback system.
              Implement notification methods in your ApplicationController to receive events.
            </p>
            <pre class="mt-2 text-xs text-blue-800 bg-blue-100 p-2 rounded"><code># Example in your ApplicationController:
def ticket_created(ticket, board, user)
  # Send email notifications using your preferred method
  NotificationMailer.new_ticket(ticket, user).deliver_later
end

def comment_created(comment, ticket, board, user)
  # Handle comment notifications
  NotificationMailer.new_comment(comment, ticket, user).deliver_later
end</code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
